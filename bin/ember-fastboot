#!/usr/bin/env node
'use strict';

// Provide a title to the process in `ps`
process.title = 'ember-fastboot-server';

var FastBootServer = require('../lib/server');
var express = require('express');
var parseArgs = require('minimist');

var options = parseArgs(process.argv.slice(2));
var distPath = options._[0];

if (!distPath) {
  console.log("You must call ember-fastboot with the path of a fastboot-dist directory:\n\n" +
      "  ember-fastboot fastboot-dist");
  process.exit(1);
}

// Stubs out the `ui` object for printing to the terminal used
// by Ember CLI addons.
var ui = {
  writeLine: function() {
    console.log.apply(console, arguments);
  }
};

var server = new FastBootServer({
  distPath: distPath,
  ui: ui
});

console.log('Booting Ember app...');

// FastFailâ„¢: this is not mandatory; the first call to visit would
// also boot the app anyway. This is just to provide useful feedback
// instead of booting a server that keeps serving 500.
//
// Note that Application#boot is still a private API atm, so it might
// go through more churn in the near term.
server.app.boot().then(function() {
  console.log('Ember app booted successfully.');

  var app = express();

  app.get('/*', server.middleware());

  var listener = app.listen(options.port, function() {
    var host = listener.address().address;
    var port = listener.address().port;
    var family = listener.address().family;

    if (family === 'IPv6') { host = '[' + host + ']'; }

    console.log('Ember FastBoot running at http://' + host + ":" + port);
  });
}, function(error) {
  if (error.stack) {
    console.error('An error occured when booting Ember app...');
    console.error(error.stack);
  } else if (error.message) {
    console.error('An error occured when booting Ember app: ' + error.message);
  } else {
    console.error('An unknown error occured when booting Ember app: ' + JSON.stringify(error));
  }

  process.exit(1);
});
