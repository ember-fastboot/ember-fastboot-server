#!/usr/bin/env node
'use strict';

// Provide a title to the process in `ps`
process.title = 'ember-fastboot-server';

var FastBootServer = require('../lib/server');
var express = require('express');
var expressCluster = require('express-cluster');
var cluster = require('cluster');
var parseArgs = require('minimist');

var FastBootWatcher = require('../lib/watcher');
var debounce = require('lodash.debounce');

var argOptions = {
  default: { port: 3000, host: '::' }
};

var options = parseArgs(process.argv.slice(2), argOptions);
var distPath = options._[0];
var assetPath = options['serve-assets-from'];
var enableWatcher = options['watch'];

if (!distPath) {
  console.error("You must call ember-fastboot with the path of a fastboot-dist directory:\n\n" +
      "  ember-fastboot fastboot-dist");
  process.exit(1);
}

var server = new FastBootServer({
  distPath: distPath
});

console.log('Booting Ember app...');

// FastFailâ„¢: this is not mandatory; the first call to visit would
// also boot the app anyway. This is just to provide useful feedback
// instead of booting a server that keeps serving 500.
//
// Note that Application#buildApp is still a private API atm, so it might
// go through more churn in the near term.
server.app.buildApp().then(function() {
  console.log('Ember app booted successfully.');

  expressCluster(function() {
    var app = express();

    if (assetPath) {
      app.get('/', server.middleware());
      app.use(express.static(assetPath));
    }

    app.get('/*', server.middleware());

    var listener = app.listen(options.port, options.host, function() {
      var host = listener.address().address;
      var port = listener.address().port;
      var family = listener.address().family;

      if (family === 'IPv6') { host = '[' + host + ']'; }

      console.log('Ember FastBoot running at http://' + host + ":" + port);
    });

    return listener;
  }, { verbose: true });
}, function(error) {
  if (error.stack) {
    console.error('An error occured when booting Ember app...');
    console.error(error.stack);
  } else if (error.message) {
    console.error('An error occured when booting Ember app: ' + error.message);
  } else {
    console.error('An unknown error occured when booting Ember app: ' + JSON.stringify(error));
  }

  process.exit(1);
});

var reloadCluster = function() {
  console.log('Reloading Ember app from ' + distPath);

  server.reload();

  for (var id in cluster.workers) {
    cluster.workers[id].send({ event: 'fastboot-reload' });
  }
};

if (cluster.isMaster) {
  process.on('SIGUSR1', reloadCluster);
} else {
  process.on('message', function(message) {
    if (message.event === 'fastboot-reload') {
      server.reload();
    }
  });
}

if (enableWatcher && cluster.isMaster) {
  var scheduleReload = debounce(function() {
    reloadCluster();
  }, 100);

  var watcher = new FastBootWatcher({
    watchedDir: distPath
  });

  watcher.on('change', scheduleReload);
  watcher.on('add', scheduleReload);
  watcher.on('delete', scheduleReload);
}
